// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/change-password": {
            "post": {
                "description": "Change user password by inputting the current password and the new password.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Change user password.",
                "parameters": [
                    {
                        "description": "the body to change user password",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangePasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ChangePasswordResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Logging in to get jwt token to access admin or user api by roles.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login as user.",
                "parameters": [
                    {
                        "description": "the body to login a user",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "registering a user from public access.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a user.",
                "parameters": [
                    {
                        "description": "the body to register a user",
                        "name": "Body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Register Success Response",
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ChangePasswordInput": {
            "type": "object",
            "required": [
                "confirm_new_password",
                "current_password",
                "new_password",
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "x-order": "0",
                    "example": "admin"
                },
                "current_password": {
                    "type": "string",
                    "x-order": "1",
                    "example": "admin"
                },
                "new_password": {
                    "type": "string",
                    "x-order": "2",
                    "example": "admin1"
                },
                "confirm_new_password": {
                    "type": "string",
                    "x-order": "3",
                    "example": "admin1"
                }
            }
        },
        "controllers.ChangePasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "change password success"
                }
            }
        },
        "controllers.LoginInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "x-order": "0",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "x-order": "1",
                    "example": "admin"
                }
            }
        },
        "controllers.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0",
                    "example": "login success"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string",
                            "example": "john@example.com"
                        },
                        "role": {
                            "type": "string",
                            "example": "user"
                        },
                        "username": {
                            "type": "string",
                            "example": "John"
                        }
                    },
                    "x-order": "1"
                },
                "token": {
                    "type": "string",
                    "x-order": "2",
                    "example": "string"
                }
            }
        },
        "controllers.RegisterInput": {
            "type": "object",
            "required": [
                "email",
                "password",
                "role",
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "x-order": "0",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "x-order": "1",
                    "example": "admin"
                },
                "email": {
                    "type": "string",
                    "x-order": "2",
                    "example": "admin@mail.com"
                },
                "role": {
                    "type": "string",
                    "x-order": "3",
                    "example": "Admin"
                }
            }
        },
        "controllers.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "0",
                    "example": "registration success"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string",
                            "example": "john@example.com"
                        },
                        "role": {
                            "type": "string",
                            "example": "user"
                        },
                        "username": {
                            "type": "string",
                            "example": "John"
                        }
                    },
                    "x-order": "1"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
